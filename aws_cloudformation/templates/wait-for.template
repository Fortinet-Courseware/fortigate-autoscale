{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template performs a delay for a specified amount of time in seconds for CloudFormation Custom Resource requests.",
    "Parameters": {
        "ServiceTimeout": {
            "Type": "Number",
            "Default": 30,
            "MinValue": 30,
            "MaxValue": 900,
            "ConstraintDescription": "must be a valid number between 30 (inclusive) and 900 (inclusive).",
            "Description": "Service timeout time in seconds"
        },
        "Runtime": {
            "Type": "String",
            "Default": "python2.7",
            "AllowedValues": ["python2.7", "python3.7"],
            "ConstraintDescription": "value must be chosen from the provided options.",
            "Description": "The function python runtime."
        }
    },
    "Resources": {
        "WaitFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import time",
                                "import logging",
                                "import threading",
                                "import cfnresponse",
                                "",
                                "def timeout(event, context):",
                                "    logging.error('Execution is about to time out, sending failure response to CloudFormation')",
                                "    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)",
                                "",
                                "def handler(event, context):",
                                "    # make sure we send a failure to CloudFormation if the function is going to timeout",
                                "    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])",
                                "    timer.start()",
                                "",
                                "    print('Received event: %s' % json.dumps(event))",
                                "    status = cfnresponse.SUCCESS",
                                "    try:",
                                "        sleep_time = event['ResourceProperties']['WaitSeconds']",
                                "        on_request_type = event['ResourceProperties']['OnRequestType']",
                                "        if event['RequestType'] == on_request_type:",
                                "            print('wait for %s seconds' % sleep_time)",
                                "            time.sleep(int(sleep_time))",
                                "            print('end waiting.')",
                                "        else:",
                                "            print('skip waiting on request type: %s' % on_request_type)",
                                "    except Exception as e:",
                                "        logging.error('Exception: %s' % e, exc_info=True)",
                                "        status = cfnresponse.FAILED",
                                "    finally:",
                                "        timer.cancel()",
                                "        cfnresponse.send(event, context, status, {}, None)",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "Delay for a specified amount of time in seconds.",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": ["RequiredRole", "Arn"]
                },
                "Runtime": {
                    "Ref": "Runtime"
                },
                "Timeout": {
                    "Ref": "ServiceTimeout"
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "RequiredRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    },
    "Outputs": {
        "FunctionName": {
            "Description": "function name.",
            "Value": {
                "Ref": "WaitFunction"
            }
        },
        "FunctionArn": {
            "Description": "function arn.",
            "Value": {
                "Fn::GetAtt": ["WaitFunction", "Arn"]
            }
        }
    }
}
