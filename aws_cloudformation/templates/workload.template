{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiGate Autoscale Solution (Existing VPC). This template deploys Fortinet FortiGate cluster into an existing VPC with a Multi-AZ Autoscale group with Lambda and LifecycleHook. Please see the Quick Start documentation for more details. **WARNING** You will be billed for the FortiGate On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "QSS3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "QSS3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "A custom identifier as resource name prefix. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers. Max length is 10."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The existing VPC IDs where you deploy the Auto Scaling group and related resources. The VPC must have the option 'DNS hostnames' enabled."
        },
        "VPCCIDR": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the selected VPC."
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public (DMZ) subnet 1, which is located in Availability Zone 1."
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public (DMZ) subnet 2, which is located in Availability Zone 2."
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Private subnet, which is located in Availability Zone 1."
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Private subnet, which is located in Availability Zone 2."
        },
        "PrivateSubnet1RouteTable": {
            "Type": "String",
            "Description": "Route table ID associated with the private subnet 1."
        },
        "PrivateSubnet2RouteTable": {
            "Type": "String",
            "Description": "Route table ID associated with the private subnet 2."
        },
        "FortiGateInstanceType": {
            "Type": "String",
            "Default": "c5.large",
            "AllowedValues": [
                "t2.small",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "Instance type to launch as FortiGate On-Demand instances. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/"
        },
        "FortiOSVersion": {
            "Type": "String",
            "Default": "LATEST",
            "AllowedValues": [
                "LATEST",
                "621",
                "606"
            ],
            "ConstraintDescription": "must be a valid FortiOS version from the selection.",
            "Description": "Supported FortiOS versions. The 'LATEST' version can be found in template parameter 'FortiGateKeyMap.FortiGateVersion' in the 'Mappings' section."
        },
        "ExpireLifecycleEntry": {
            "Type": "Number",
            "Default": 400,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "FortiGate instance lifecycle expiry entry (in seconds). Minimum is 60. Maximum is 3600. This is the time between the FortiGate instance is launched and it starts to send the first request to the callback endpoint."
        },
        "FortiGateAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Auto Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FortiGateAsgDesiredCapacity": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 1.",
            "Description": "The number of FortiGate instances the group should have at any time, also called desired capacity. Must keep at least 2 FortiGates in the group for High Availability. Minimum is 2."
        },
        "FortiGateAsgMinSize": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 1.",
            "Description": "Minimum number of FortiGate instances in the Auto Scaling Group. Minimum is 2."
        },
        "FortiGateAsgMaxSize": {
            "Type": "Number",
            "Default": 4,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 1.",
            "Description": "Maximum number of FortiGate instances in the Auto Scaling Group. Minimum is 2."
        },
        "FortiGateAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FortiGateAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGateAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGateElbTgHealthyThreshold": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "ConstraintDescription": "must be a valid number not less than 3.",
            "Description": "The number of consecutive health check failures required before considering a FortiGate instance unhealthy. Minimum is 3."
        },
        "BalanceWebTrafficOverPort": {
            "Type": "Number",
            "Default": 443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Balance web service traffic over this port if the internal web-service load balancer is enabled. Minimum is 1. Maximum is 65535."
        },
        "InternalLoadBalancingOptions": {
            "Type": "String",
            "Default": "add a new internal load balancer",
            "AllowedValues": [
                "add a new internal load balancer",
                "use an existing load balancer",
                "do not need one"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Add an optional pre-defined load balancer to route traffic to web service in the private subnets. You can optionally use your own one or decide to not need one."
        },
        "InternalLoadBalancerDnsName": {
            "Type": "String",
            "Description": "(Optional) DNS Name of the Elastic Load Balancer which is used in the private subnets. Specify if only you use your own one."
        },
        "FortiGatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "Description": "A secret key for the FortiGate instances to securely communicate with each other. It can be of your choice of a string, such as numbers or letters or the combination of them. Max length 128."
        },
        "FortiGateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Minimum is 1. Maximum is 65535. Do not use: 443, 541, 514, 703 because these are FortiGate reserved ports."
        },
        "FortiGateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "HeartBeatLossCount": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid number between 1 and 65535.",
            "Description": "Number of consecutively lost heartbeats. When the Heartbeat loss count has been reached, the VM is deemed unhealthy and fail-over activities will commence."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "IfAddNewInternalLoadBalancer": {
            "Fn::Equals": [
                {
                    "Ref": "InternalLoadBalancingOptions"
                },
                "add a new internal load balancer"
            ]
        },
        "IfUseExistingInternalLoadBalancer": {
            "Fn::Equals": [
                {
                    "Ref": "InternalLoadBalancingOptions"
                },
                "use an existing load balancer"
            ]
        },
        "IfNeedInternalLoadBalancing": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "InternalLoadBalancingOptions"
                        },
                        "do not need one"
                    ]
                }
            ]
        },
        "IfCustomBalanceWebTrafficOverPort": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        "0"
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "FortiGateKeyMap": {
            "FortiGateVersion": {
                "LATEST": "FGTVM64PAYG621",
                "621": "FGTVM64PAYG621",
                "606": "FGTVM64PAYG606"
            }
        },
        "AWSAMIRegionMap": {
            "AMI": {
                "FGTVM64PAYG621": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0932 (6.2.1) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-094f6bfd5592431e0.4",
                "FGTVM64PAYG606": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0272 (6.0.6) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-048fbaf13155f2abf.4"
            },
            "ap-northeast-1": {
                "FGTVM64PAYG621": "ami-09cdcd4c2445e2c70",
                "FGTVM64PAYG606": "ami-0760c962419fedf03"
            },
            "ap-northeast-2": {
                "FGTVM64PAYG621": "ami-0a796272ef341a29d",
                "FGTVM64PAYG606": "ami-0387943a776b4b60d"
            },
            "ap-southeast-1": {
                "FGTVM64PAYG621": "ami-02502caa43eb2d055",
                "FGTVM64PAYG606": "ami-04d5de37af6752b20"
            },
            "ap-southeast-2": {
                "FGTVM64PAYG621": "ami-09c29aa6a848e77b9",
                "FGTVM64PAYG606": "ami-03bdee3ae0c361cc0"
            },
            "ap-south-1": {
                "FGTVM64PAYG621": "ami-0b71271bc53238423",
                "FGTVM64PAYG606": "ami-067e008638637e71e"
            },
            "sa-east-1": {
                "FGTVM64PAYG621": "ami-034495a12fdb747ce",
                "FGTVM64PAYG606": "ami-06d4b6df030dc5d92"
            },
            "eu-west-1": {
                "FGTVM64PAYG621": "ami-0c14998b35a39578e",
                "FGTVM64PAYG606": "ami-0fade92f8a2d2e2b2"
            },
            "eu-west-2": {
                "FGTVM64PAYG621": "ami-08cce3d57081f5137",
                "FGTVM64PAYG606": "ami-0b1bed84cc40437e7"
            },
            "eu-west-3": {
                "FGTVM64PAYG621": "ami-06dc0733eb79a0101",
                "FGTVM64PAYG606": "ami-013e274b6219a609c"
            },
            "eu-central-1": {
                "FGTVM64PAYG621": "ami-0f670719612ad57cc",
                "FGTVM64PAYG606": "ami-0e76e96a490a65635"
            },
            "ca-central-1": {
                "FGTVM64PAYG621": "ami-06068c796e12ce93a",
                "FGTVM64PAYG606": "ami-0a0e08538c0d5496b"
            },
            "us-east-1": {
                "FGTVM64PAYG621": "ami-0face455a14251c57",
                "FGTVM64PAYG606": "ami-00cf45d0000a704da"
            },
            "us-east-2": {
                "FGTVM64PAYG621": "ami-07ca9dae55f42b1c3",
                "FGTVM64PAYG606": "ami-0ec45e3bafb8c9a71"
            },
            "us-west-1": {
                "FGTVM64PAYG621": "ami-0c106aaaac4c4abd8",
                "FGTVM64PAYG606": "ami-0454a9f438fdec4a6"
            },
            "us-west-2": {
                "FGTVM64PAYG621": "ami-0439b030915c59e67",
                "FGTVM64PAYG606": "ami-0ac0683ebd9c5d321"
            },
            "us-gov-west-1": {
                "FGTVM64PAYG621": "ami-6d00430c",
                "FGTVM64PAYG606": "ami-4ce1a02d"
            }
        },
        "ProtocolPortMap": {
            "HTTP": {
                "defaultport": "80"
            },
            "HTTPS": {
                "defaultport": "443"
            },
            "TCP": {
                "defaultport": "443"
            }
        }
    },
    "Resources": {
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::Split": [
                                    "-",
                                    {
                                        "Fn::Select": [
                                            2,
                                            {
                                                "Fn::Split": [
                                                    "/",
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/create-db-table.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StackCopyLambda": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ObjectPaths": "functions/packages/fgt-asg-handler.zip"
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/copy-objects.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StackCreateNicAttachmentService": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::Split": [
                                    "-",
                                    {
                                        "Fn::Select": [
                                            2,
                                            {
                                                "Fn::Split": [
                                                    "/",
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "VpcId": {
                        "Ref": "VpcId"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/nic-attachment.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "FgtAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "FgtAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "StackCreateFortiGateNatGateway": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "VpcId": {
                        "Ref": "VpcId"
                    },
                    "SubnetId1": {
                        "Ref": "PublicSubnet1"
                    },
                    "SubnetId2": {
                        "Ref": "PrivateSubnet1"
                    },
                    "SubnetId3": {
                        "Ref": "PublicSubnet2"
                    },
                    "SubnetId4": {
                        "Ref": "PrivateSubnet2"
                    },
                    "FortiGateImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersion",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "FortiGateInstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "FortiGateAdminCidr": {
                        "Ref": "FortiGateAdminCidr"
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "FortiGateAdminPort": {
                        "Ref": "FortiGateAdminPort"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/create-nat-fgt-master.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "NatGateway1RouteAttachmentNew": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateSubnet1RouteTable"
                },
                "NetworkInterfaceId": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateNatGateway",
                        "Outputs.InstanceId1Nic1Id"
                    ]
                }
            }
        },
        "NatGateway2RouteAttachmentNew": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateSubnet2RouteTable"
                },
                "NetworkInterfaceId": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateNatGateway",
                        "Outputs.InstanceId2Nic1Id"
                    ]
                }
            }
        },
        "FgtSecurityGroupIngressAllowedTraffic1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "IfCustomBalanceWebTrafficOverPort",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "BalanceWebTrafficOverPort"
                },
                "ToPort": {
                    "Ref": "BalanceWebTrafficOverPort"
                },
                "CidrIp": "0.0.0.0/0"
            }
        },
        "LaunchTemplateFgtAutoscale": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateData": {
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Sub": [
                                "{\"config-url\": \"${configUrl}\",\"productcode\":\"${productCode}\"}",
                                {
                                    "configUrl": {
                                        "Fn::Sub": [
                                            "https://${api}.execute-api.${region}.amazonaws.com/${stage}/get-config",
                                            {
                                                "region": {
                                                    "Ref":"AWS::Region"
                                                },
                                                "api": {
                                                    "Ref": "ApiGatewayFgtAsg"
                                                },
                                                "stage": "prod",
                                                "resource": "complete"
                                            }
                                        ]
                                    },
                                    "productCode": ""
                                }
                            ]
                        }
                    },
                    "InstanceInitiatedShutdownBehavior": "terminate",
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersion",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "BlockDeviceMappings": [],
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "IamInstanceProfileFgt",
                                "Arn"
                            ]
                        }
                    },
                    "InstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "Groups": [
                                {
                                    "Ref": "FgtAsgSecurityGroup"
                                }
                            ],
                            "AssociatePublicIpAddress": true
                        }
                    ],
                    "KeyName": {
                        "Ref": "KeyPairName"
                    }
                }
            },
            "DependsOn": [
                "IamInstanceProfileFgt"
            ]
        },
        "FortiGateScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "FortiGateAutoScalingGroup",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "LaunchTemplateFgtAutoscale"
                    },
                    "Version": "1"
                },
                "Cooldown": {
                    "Ref": "FortiGateAsgCooldown"
                },
                "DesiredCapacity": 0,
                "HealthCheckGracePeriod": {
                    "Ref": "FortiGateAsgHealthCheckGracePeriod"
                },
                "HealthCheckType": "EC2",
                "MaxSize": {
                    "Ref": "FortiGateAsgMaxSize"
                },
                "MinSize": 0,
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "TerminationPolicies": [
                    "Default"
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "ElbV2TargetGroupFgtAsg"
                    }
                ]
            },
            "DependsOn": [
                "LaunchTemplateFgtAutoscale",
                "ElbV2TargetGroupFgtAsg",
                "LambdaFunctionFgtAsg",
                "LpAsgLifecyclePermission",
                "StartNicAttachmentService",
                "StopFortiGateAutoScalingGroupService"
            ]
        },
        "AsgScaleInPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "FortiGateScalingGroup"
                },
                "ScalingAdjustment": "-1"
            },
            "DependsOn": [
                "FortiGateScalingGroup"
            ]
        },
        "ScaleOutPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "FortiGateScalingGroup"
                },
                "ScalingAdjustment": "1"
            },
            "DependsOn": [
                "FortiGateScalingGroup"
            ]
        },
        "AlarmCpuUtilHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "FortiGateAsgScaleOutThreshold"
                },
                "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                "Period": {
                    "Ref": "FortiGateAsgCooldown"
                },
                "AlarmActions": [
                    {
                        "Ref": "ScaleOutPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "FortiGateScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "AlarmCpuUtilLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "FortiGateAsgScaleInThreshold"
                },
                "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
                "Period": {
                    "Ref": "FortiGateAsgCooldown"
                },
                "AlarmActions": [
                    {
                        "Ref": "AsgScaleInPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "FortiGateScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "LambdaFunctionFgtAsg": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "FortiGate Auto Scaling Group handler function.",
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "lfFgt",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Runtime": "nodejs8.10",
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLfFgtAsg",
                        "Arn"
                    ]
                },
                "Handler": "index.AutoscaleHandler",
                "Timeout": 300,
                "Code": {
                    "S3Bucket": {
                        "Fn::GetAtt": [
                            "StackCopyLambda",
                            "Outputs.DestinationBucket"
                        ]
                    },
                    "S3Key": {
                        "Fn::Sub": [
                            "${KeyPrefix}functions/packages/fgt-asg-handler.zip",
                            {
                                "KeyPrefix": {
                                    "Fn::GetAtt": [
                                        "StackCopyLambda",
                                        "Outputs.KeyPrefix"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "EXPIRE_LIFECYCLE_ENTRY": {
                            "Ref": "ExpireLifecycleEntry"
                        },
                        "API_GATEWAY_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "agwFgt",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "API_GATEWAY_STAGE_NAME": "prod",
                        "API_GATEWAY_RESOURCE_NAME": "complete",
                        "UNIQUE_ID": {
                            "Fn::Select": [
                                0,
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Fn::Select": [
                                                2,
                                                {
                                                    "Fn::Split": [
                                                        "/",
                                                        {
                                                            "Ref": "AWS::StackId"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "CUSTOM_ID": {
                            "Ref": "CustomIdentifier"
                        },
                        "AUTO_SCALING_GROUP_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "VPC_ID": {
                            "Ref": "VpcId"
                        },
                        "STACK_ASSETS_S3_BUCKET_NAME": {
                            "Ref": "QSS3BucketName"
                        },
                        "STACK_ASSETS_S3_KEY_PREFIX": {
                            "Fn::Sub": [
                                "${QSS3KeyPrefix}assets",
                                {
                                    "QSS3KeyPrefix": {
                                        "Ref": "QSS3KeyPrefix"
                                    }
                                }
                            ]
                        },
                        "REQUIRED_CONFIG_SET": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "httpsroutingpolicy",
                                                {
                                                    "Fn::If": [
                                                        "IfNeedInternalLoadBalancing",
                                                        "yes",
                                                        "no"
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "FORTIGATE_INTERNAL_ELB_DNS": {
                            "Fn::If": [
                                "IfAddNewInternalLoadBalancer",
                                {
                                    "Fn::GetAtt": [
                                        "ElbV2LoadBalancerInternal",
                                        "DNSName"
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "IfUseExistingInternalLoadBalancer",
                                        {
                                            "Ref": "InternalLoadBalancerDnsName"
                                        },
                                        ""
                                    ]
                                }
                            ]
                        },
                        "FORTIGATE_PSKSECRET": {
                            "Ref": "FortiGatePskSecret"
                        },
                        "FORTIGATE_ADMIN_PORT": {
                            "Ref": "FortiGateAdminPort"
                        },
                        "FORTIGATE_TRAFFIC_PORT": {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        "FORTIGATE_SYNC_INTERFACE": "port1",
                        "HEART_BEAT_LOSS_COUNT": {
                            "Ref": "HeartBeatLossCount"
                        },
                        "SCALING_GROUP_NAME_PAYG": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "SCALING_GROUP_NAME_BYOL": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "MASTER_SCALING_GROUP_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            },
            "DependsOn": [
                "StackCopyLambda",
                "StackCreateDynamoDBTable"
            ]
        },
        "LambdaFunctionFgtAsgCfnService": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "FortiGate Auto Scaling Group service provider function for Cloud Formation stack.",
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "fgt-asg-cfn-svc",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Runtime": "nodejs8.10",
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLfFgtAsg",
                        "Arn"
                    ]
                },
                "Handler": "cfn-service.handler",
                "Timeout": 300,
                "Code": {
                    "S3Bucket": {
                        "Fn::GetAtt": [
                            "StackCopyLambda",
                            "Outputs.DestinationBucket"
                        ]
                    },
                    "S3Key": {
                        "Fn::Sub": [
                            "${KeyPrefix}functions/packages/fgt-asg-handler.zip",
                            {
                                "KeyPrefix": {
                                    "Fn::GetAtt": [
                                        "StackCopyLambda",
                                        "Outputs.KeyPrefix"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "EXPIRE_LIFECYCLE_ENTRY": {
                            "Ref": "ExpireLifecycleEntry"
                        },
                        "API_GATEWAY_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "agwFgt",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "API_GATEWAY_STAGE_NAME": "prod",
                        "API_GATEWAY_RESOURCE_NAME": "complete",
                        "UNIQUE_ID": {
                            "Fn::Select": [
                                0,
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Fn::Select": [
                                                2,
                                                {
                                                    "Fn::Split": [
                                                        "/",
                                                        {
                                                            "Ref": "AWS::StackId"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "CUSTOM_ID": {
                            "Ref": "CustomIdentifier"
                        },
                        "AUTO_SCALING_GROUP_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "VPC_ID": {
                            "Ref": "VpcId"
                        },
                        "STACK_ASSETS_S3_BUCKET_NAME": {
                            "Ref": "QSS3BucketName"
                        },
                        "STACK_ASSETS_S3_KEY_PREFIX": {
                            "Fn::Sub": [
                                "${QSS3KeyPrefix}assets",
                                {
                                    "QSS3KeyPrefix": {
                                        "Ref": "QSS3KeyPrefix"
                                    }
                                }
                            ]
                        },
                        "REQUIRED_CONFIG_SET": {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "httpsroutingpolicy",
                                                {
                                                    "Fn::If": [
                                                        "IfNeedInternalLoadBalancing",
                                                        "yes",
                                                        "no"
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "FORTIGATE_INTERNAL_ELB_DNS": {
                            "Fn::If": [
                                "IfAddNewInternalLoadBalancer",
                                {
                                    "Fn::GetAtt": [
                                        "ElbV2LoadBalancerInternal",
                                        "DNSName"
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "IfUseExistingInternalLoadBalancer",
                                        {
                                            "Ref": "InternalLoadBalancerDnsName"
                                        },
                                        ""
                                    ]
                                }
                            ]
                        },
                        "FORTIGATE_PSKSECRET": {
                            "Ref": "FortiGatePskSecret"
                        },
                        "FORTIGATE_ADMIN_PORT": {
                            "Ref": "FortiGateAdminPort"
                        },
                        "FORTIGATE_TRAFFIC_PORT": {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        "FORTIGATE_SYNC_INTERFACE": "port1",
                        "HEART_BEAT_LOSS_COUNT": {
                            "Ref": "HeartBeatLossCount"
                        },
                        "SCALING_GROUP_NAME_PAYG": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "SCALING_GROUP_NAME_BYOL": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "MASTER_SCALING_GROUP_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiGateAutoScalingGroup",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            },
            "DependsOn": [
                "StackCopyLambda",
                "StackCreateDynamoDBTable"
            ]
        },
        "ApiGatewayFgtAsg": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "agwFgt",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "EndpointConfiguration": {
                    "Types": [
                        "PRIVATE"
                    ]
                },
                "Policy": {
                    "Fn::Sub": [
                        "{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"execute-api:\\/*\\\",\\\"Condition\\\":{\\\"StringEquals\\\":{\\\"aws:sourceVpce\\\":\\\"${vpce}\\\"}}}]}",
                        {
                            "vpce": {
                                "Ref": "VpcEndpointApiGw"
                            }
                        }
                    ]
                }
            }
        },
        "ApiGwDeploymentFgtAsg": {
            "DependsOn": [
                "ApiGwMethodFgtAsgComplete",
                "ApiGwMethodFgtAsgGetConfig"
            ],
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFgtAsg"
                },
                "StageName": "prod"
            }
        },
        "VpcEndpointApiGw": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": [
                        "com.amazonaws.${region}.execute-api",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "FgtAsgSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet1"
                    }
                ]
            }
        },
        "IamInstanceProfileFgt": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "IamRoleFgtInstance"
                    }
                ]
            }
        },
        "IamRoleFgtInstance": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*",
                                            {
                                                "QSS3BucketName": {
                                                    "Ref": "QSS3BucketName"
                                                },
                                                "QSS3KeyPrefix": {
                                                    "Ref": "QSS3KeyPrefix"
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    }
                ]
            }
        },
        "ApiGwResFgtAsgComplete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFgtAsg"
                },
                "PathPart": "complete",
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayFgtAsg",
                        "RootResourceId"
                    ]
                }
            }
        },
        "ApiGwMethodFgtAsgComplete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ResourceId": {
                    "Ref": "ApiGwResFgtAsgComplete"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayFgtAsg"
                },
                "AuthorizationType": "NONE",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LambdaFunctionFgtAsg",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                }
            }
        },
        "ApiGwResFgtAsgGetConfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFgtAsg"
                },
                "PathPart": "get-config",
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayFgtAsg",
                        "RootResourceId"
                    ]
                }
            }
        },
        "ApiGwMethodFgtAsgGetConfig": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ResourceId": {
                    "Ref": "ApiGwResFgtAsgGetConfig"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayFgtAsg"
                },
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LambdaFunctionFgtAsg",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                }
            }
        },
        "IamRoleLfFgtAsg": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "autoscale-handler-inline-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:CreateTable",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": {
                                        "Fn::Split": [
                                            ",",
                                            {
                                                "Fn::Join": [
                                                    ",",
                                                    [
                                                        {
                                                            "Fn::GetAtt": [
                                                                "StackCreateDynamoDBTable",
                                                                "Outputs.DdbTableArnList"
                                                            ]
                                                        }
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:CompleteLifecycleAction",
                                        "autoscaling:SetDesiredCapacity",
                                        "autoscaling:SetInstanceProtection",
                                        "autoscaling:ExitStandby",
                                        "autoscaling:BatchPutScheduledUpdateGroupAction",
                                        "autoscaling:EnterStandby",
                                        "autoscaling:PutScheduledUpdateGroupAction",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "autoscaling:DeleteNotificationConfiguration",
                                        "autoscaling:SetInstanceHealth",
                                        "autoscaling:TerminateInstanceInAutoScalingGroup",
                                        "autoscaling:AttachLoadBalancers",
                                        "autoscaling:DetachLoadBalancers",
                                        "autoscaling:BatchDeleteScheduledAction",
                                        "autoscaling:ResumeProcesses",
                                        "autoscaling:SetDesiredCapacity",
                                        "autoscaling:PutLifecycleHook",
                                        "autoscaling:DetachLoadBalancerTargetGroups",
                                        "autoscaling:SuspendProcesses",
                                        "autoscaling:AttachLoadBalancerTargetGroups",
                                        "autoscaling:AttachInstances",
                                        "autoscaling:CompleteLifecycleAction",
                                        "autoscaling:CreateOrUpdateTags",
                                        "autoscaling:SetInstanceProtection",
                                        "autoscaling:DeleteAutoScalingGroup",
                                        "autoscaling:DeleteLifecycleHook",
                                        "autoscaling:CreateAutoScalingGroup",
                                        "autoscaling:DeleteScheduledAction",
                                        "autoscaling:DetachInstances",
                                        "autoscaling:RecordLifecycleActionHeartbeat"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:autoscaling:${AWS_REGION}:${AWS_ACCOUNT_ID}:autoScalingGroup:*:autoScalingGroupName/${ASG_NAME}",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "AWS_ACCOUNT_ID": {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "ASG_NAME": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "CustomIdentifier"
                                                            },
                                                            "FortiGateAutoScalingGroup",
                                                            {
                                                                "Fn::Select": [
                                                                    0,
                                                                    {
                                                                        "Fn::Split": [
                                                                            "-",
                                                                            {
                                                                                "Fn::Select": [
                                                                                    2,
                                                                                    {
                                                                                        "Fn::Split": [
                                                                                            "/",
                                                                                            {
                                                                                                "Ref": "AWS::StackId"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:DescribeAutoScalingNotificationTypes",
                                        "autoscaling:DescribeAutoScalingInstances",
                                        "ec2:DescribeInstances",
                                        "autoscaling:DescribeScalingProcessTypes",
                                        "autoscaling:DescribeTerminationPolicyTypes",
                                        "dynamodb:ListTables",
                                        "autoscaling:DescribePolicies",
                                        "ec2:DescribeInstanceAttribute",
                                        "autoscaling:DescribeLaunchConfigurations",
                                        "autoscaling:DescribeAdjustmentTypes",
                                        "ec2:DescribeNetworkInterfaces",
                                        "autoscaling:DescribeScalingActivities",
                                        "autoscaling:DescribeAccountLimits",
                                        "autoscaling:DescribeAutoScalingGroups",
                                        "autoscaling:DescribeScheduledActions",
                                        "autoscaling:DescribeLoadBalancerTargetGroups",
                                        "autoscaling:DescribeNotificationConfigurations",
                                        "autoscaling:DescribeLifecycleHookTypes",
                                        "ec2:DetachNetworkInterface",
                                        "autoscaling:DescribeTags",
                                        "ec2:DeleteNetworkInterface",
                                        "autoscaling:DescribeMetricCollectionTypes",
                                        "autoscaling:DescribeLoadBalancers",
                                        "autoscaling:DescribeLifecycleHooks",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DescribeVpcs",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:CreateTags"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "apigateway:GET"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:apigateway:${AWS_REGION}::*",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${bucketname}/${keyprefix}assets/configset/*",
                                            {
                                                "bucketname": {
                                                    "Ref": "QSS3BucketName"
                                                },
                                                "keyprefix": {
                                                    "Ref": "QSS3KeyPrefix"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ErAsgLifecycleHookTrigger": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "Fn::Sub": [
                        "{\"source\":[\"aws.autoscaling\"],\"detail-type\":[\"EC2 Instance Launch Successful\",\"EC2 Instance Launch Unsuccessful\",\"EC2 Instance-launch Lifecycle Action\", \"EC2 Instance Terminate Successful\",\"EC2 Instance Terminate unsuccessful\",\"EC2 Instance-terminate Lifecycle Action\"], \"detail\": {\"AutoScalingGroupName\": [\"${asg}\"]}}",
                        {
                            "asg": {
                                "Fn::Join": [
                                    "-",
                                    [
                                        {
                                            "Ref": "CustomIdentifier"
                                        },
                                        "FortiGateAutoScalingGroup",
                                        {
                                            "Fn::Select": [
                                                0,
                                                {
                                                    "Fn::Split": [
                                                        "-",
                                                        {
                                                            "Fn::Select": [
                                                                2,
                                                                {
                                                                    "Fn::Split": [
                                                                        "/",
                                                                        {
                                                                            "Ref": "AWS::StackId"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "State": "ENABLED",
                "Description": "Trigger when FortiGate auto scaling group is launching / terminating instances or taking lifecycle actions.",
                "Targets": [
                    {
                        "Id": "erFortiGateAutoScalingTriggerToLambda",
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunctionFgtAsg",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "LpAsgLifecyclePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFunctionFgtAsg"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ErAsgLifecycleHookTrigger",
                        "Arn"
                    ]
                }
            }
        },
        "LpAsgComplete": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionFgtAsg",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${region}:${account}:${api}/*",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            },
                            "account": {
                                "Ref": "AWS::AccountId"
                            },
                            "api": {
                                "Ref": "ApiGatewayFgtAsg"
                            }
                        }
                    ]
                }
            },
            "DependsOn": [
                "ApiGatewayFgtAsg",
                "ApiGwDeploymentFgtAsg",
                "ApiGwResFgtAsgGetConfig",
                "ApiGwMethodFgtAsgGetConfig",
                "ApiGwResFgtAsgComplete",
                "ApiGwMethodFgtAsgComplete",
                "LambdaFunctionFgtAsg"
            ]
        },
        "AsgLifeCycleHookLaunching": {
            "DependsOn": "LambdaFunctionFgtAsg",
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "FortiGateScalingGroup"
                },
                "LifecycleHookName": "asgFgtAutoscaleLifecycleLaunching",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
                "HeartbeatTimeout": {
                    "Ref": "ExpireLifecycleEntry"
                },
                "DefaultResult": "ABANDON"
            }
        },
        "AsgLifeCycleHookTerminating": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "FortiGateScalingGroup"
                },
                "LifecycleHookName": "asgFgtAutoscaleLifecycleHookTerminating",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "HeartbeatTimeout": {
                    "Ref": "ExpireLifecycleEntry"
                },
                "DefaultResult": "CONTINUE"
            },
            "DependsOn": [
                "LambdaFunctionFgtAsg",
                "StopFortiGateAutoScalingGroupService"
            ]
        },
        "ElbV2TargetGroupFgtAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "tgFgt",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "TCP",
                "Port": {
                    "Fn::If": [
                        "IfCustomBalanceWebTrafficOverPort",
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        {
                            "Fn::FindInMap": [
                                "ProtocolPortMap",
                                "TCP",
                                "defaultport"
                            ]
                        }
                    ]
                },
                "HealthCheckProtocol": "TCP",
                "HealthCheckPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "HealthyThresholdCount": {
                    "Ref": "FortiGateElbTgHealthyThreshold"
                },
                "UnhealthyThresholdCount": {
                    "Ref": "FortiGateElbTgHealthyThreshold"
                },
                "VpcId": {
                    "Ref": "VpcId"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "30"
                    }
                ]
            }
        },
        "ElbV2LoadBalancerFgtAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Type": "network",
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "nlbFgt",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": [
                "ElbV2TargetGroupFgtAsg"
            ]
        },
        "ElbV2ListenerFgtAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ElbV2LoadBalancerFgtAsg"
                },
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ElbV2TargetGroupFgtAsg"
                        }
                    }
                ],
                "Protocol": "TCP",
                "Port": {
                    "Fn::If": [
                        "IfCustomBalanceWebTrafficOverPort",
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        {
                            "Fn::FindInMap": [
                                "ProtocolPortMap",
                                "TCP",
                                "defaultport"
                            ]
                        }
                    ]
                }
            },
            "DependsOn": [
                "ElbV2LoadBalancerFgtAsg",
                "ElbV2TargetGroupFgtAsg"
            ]
        },
        "ElbV2TargetGroupInternal": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Condition": "IfAddNewInternalLoadBalancer",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "tgPrSn",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "TCP",
                "Port": {
                    "Fn::If": [
                        "IfCustomBalanceWebTrafficOverPort",
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        {
                            "Fn::FindInMap": [
                                "ProtocolPortMap",
                                "TCP",
                                "defaultport"
                            ]
                        }
                    ]
                },
                "HealthCheckProtocol": "TCP",
                "HealthCheckPort": {
                    "Fn::If": [
                        "IfCustomBalanceWebTrafficOverPort",
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        {
                            "Fn::FindInMap": [
                                "ProtocolPortMap",
                                "TCP",
                                "defaultport"
                            ]
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ElbV2LoadBalancerInternal": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Condition": "IfAddNewInternalLoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "Type": "network",
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "nlbPrSn",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": [
                "ElbV2TargetGroupInternal"
            ]
        },
        "ElbV2ListenerInternal": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Condition": "IfAddNewInternalLoadBalancer",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ElbV2LoadBalancerInternal"
                },
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ElbV2TargetGroupInternal"
                        }
                    }
                ],
                "Protocol": "TCP",
                "Port": {
                    "Fn::If": [
                        "IfCustomBalanceWebTrafficOverPort",
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        {
                            "Fn::FindInMap": [
                                "ProtocolPortMap",
                                "TCP",
                                "defaultport"
                            ]
                        }
                    ]
                }
            },
            "DependsOn": [
                "ElbV2LoadBalancerInternal",
                "ElbV2TargetGroupInternal"
            ]
        },
        "StartNicAttachmentService": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateNicAttachmentService",
                        "Outputs.CfnServiceProvider"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "StartFortiGateAutoScalingGroupService": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaFunctionFgtAsgCfnService",
                        "Arn"
                    ]
                },
                "ServiceType": "initiate",
                "DesiredCapacity":{
                    "Ref": "FortiGateAsgDesiredCapacity"
                },
                "MinSize":{
                    "Ref": "FortiGateAsgMinSize"
                },
                "MaxSize":{
                    "Ref": "FortiGateAsgMaxSize"
                },
                "Subnet1": {
                    "Ref": "PublicSubnet1"
                },
                "Subnet1Pair": {
                    "Ref": "PrivateSubnet1"
                },
                "Subnet2": {
                    "Ref": "PublicSubnet2"
                },
                "Subnet2Pair": {
                    "Ref": "PrivateSubnet2"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource",
            "DependsOn": [
                "FortiGateScalingGroup"
            ]
        },
        "StopFortiGateAutoScalingGroupService": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaFunctionFgtAsgCfnService",
                        "Arn"
                    ]
                },
                "ServiceType": "stop",
                "DesiredCapacity":{
                    "Ref": "FortiGateAsgDesiredCapacity"
                },
                "MinSize":{
                    "Ref": "FortiGateAsgMinSize"
                },
                "MaxSize":{
                    "Ref": "FortiGateAsgMaxSize"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "VPCCIDR",
                        "PublicSubnet1",
                        "PublicSubnet2",
                        "PrivateSubnet1",
                        "PrivateSubnet2",
                        "PrivateSubnet1RouteTable",
                        "PrivateSubnet2RouteTable"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate configuration"
                    },
                    "Parameters": [
                        "CustomIdentifier",
                        "FortiGateInstanceType",
                        "FortiOSVersion",
                        "FortiGatePskSecret",
                        "FortiGateAdminPort",
                        "FortiGateAdminCidr",
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate auto scaling group configuration"
                    },
                    "Parameters": [
                        "ExpireLifecycleEntry",
                        "FortiGateAsgDesiredCapacity",
                        "FortiGateAsgMinSize",
                        "FortiGateAsgMaxSize",
                        "FortiGateAsgHealthCheckGracePeriod",
                        "FortiGateAsgCooldown",
                        "FortiGateAsgScaleOutThreshold",
                        "FortiGateAsgScaleInThreshold",
                        "FortiGateElbTgHealthyThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "Fail-over management configuration"
                    },
                    "Parameters": [
                        "HeartBeatLossCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Load balancing configuration"
                    },
                    "Parameters": [
                        "InternalLoadBalancingOptions",
                        "InternalLoadBalancerDnsName",
                        "BalanceWebTrafficOverPort"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "VpcId": {
                    "default": "VPC ID"
                },
                "PublicSubnet1": {
                    "default": "FortiGate subnet 1"
                },
                "PublicSubnet2": {
                    "default": "FortiGate subnet 2"
                },
                "PrivateSubnet1": {
                    "default": "Protected subnet 1"
                },
                "PrivateSubnet2": {
                    "default": "Protected subnet 2"
                },
                "PrivateSubnet1RouteTable": {
                    "default": "Route table 1 ID"
                },
                "PrivateSubnet2RouteTable": {
                    "default": "Route table 2 ID"
                },
                "FortiGateInstanceType": {
                    "default": "Instance type"
                },
                "FortiOSVersion": {
                    "default": "FortiOS version"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 bucket name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 key prefix"
                },
                "ExpireLifecycleEntry": {
                    "default": "Instance lifecycle expiry"
                },
                "FortiGateAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FortiGateAsgDesiredCapacity": {
                    "default": "Desired capacity"
                },
                "FortiGateAsgMinSize": {
                    "default": "Minimum group size"
                },
                "FortiGateAsgMaxSize": {
                    "default": "Maximum group size"
                },
                "FortiGateAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FortiGateAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FortiGateAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiGateElbTgHealthyThreshold": {
                    "default": "Health threshold"
                },
                "BalanceWebTrafficOverPort": {
                    "default": "Web service traffic port"
                },
                "InternalLoadBalancingOptions": {
                    "default": "Internal ELB options"
                },
                "InternalLoadBalancerDnsName": {
                    "default": "Internal ELB DNS name"
                },
                "FortiGateAdminPort": {
                    "default": "Admin port"
                },
                "FortiGateAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "FortiGatePskSecret": {
                    "default": "FortiGate PSK secret"
                },
                "HeartBeatLossCount": {
                    "default": "Heart beat loss count"
                }
            }
        }
    },
    "Outputs": {
        "CustomIdentifier": {
            "Description": "A custom identifier as a resource name prefix.",
            "Value": {
                "Ref": "CustomIdentifier"
            }
        },
        "UniqueID": {
            "Description": "A globally unique ID for your stack.",
            "Value": {
                "Fn::Select": [
                    0,
                    {
                        "Fn::Split": [
                            "-",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "/",
                                            {
                                                "Ref": "AWS::StackId"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    }
}
